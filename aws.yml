---
- name: IAAS
  hosts: localhost
  connection: local
  gather_facts: False
  tags: [iaas_only,init, update]
  tasks:
  - name: Get zones by region
    aws_az_facts:
      region: "{{aws_region}}"
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
    register: aws_zones

  - name: Create Route53 zone
    route53_zone:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      state: present
      zone: "{{ cert_common_domain_zone }}"

  - name: Create security group
    ec2_group:
      name: "{{ sg_name }}"
      description: "Ansible Security Group"
      region: "{{aws_region}}"
      vpc_id: "{{vpc_id}}"
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: all
          cidr_ip: "{{my_local_cidr_ip}}"
        - proto: all
          group_name: "{{ sg_name }}"
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
      tags:
        tool: "ansible"
    register: firewall

  - name: Create an EC2 instances
    ec2:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      key_name: "{{key_name}}"
      region: "{{aws_region}}"
      group_id: "{{firewall.group_id}}"
      instance_type: "{{instance_type}}"
      image: ami-5e8bb23b
      wait: yes
      exact_count: 2
      count_tag:
        tool: "ansible"
      instance_tags:
        tool: "ansible"
    register: ec2

  - name: Run EC2 instances
    ec2:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      key_name: "{{key_name}}"
      region: "{{aws_region}}"
      state: running
      wait: yes
      instance_ids: "{{ ec2.tagged_instances | map(attribute='id') | list }}"
    register: ec2

  - name: Create ELB
    local_action:
      module: ec2_elb_lb
      name: "ansible"
      state: present
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      region: "{{aws_region}}"
      security_group_names:
        - "{{ sg_name }}"
      zones: "{{ aws_zones.availability_zones | map(attribute='zone_name') | list }}"
      listeners:
        - protocol: tcp
          load_balancer_port: 80
          instance_port: 80
        - protocol: tcp
          load_balancer_port: 443
          instance_port: 443
      instance_ids: "{{ ec2.instances | map(attribute='id') | list }}"
    register: lb

  - name: Wait for SSH to come up.
    local_action: wait_for host={{ item.public_ip }} port=22 delay=20 timeout=320 state=started
    with_items: "{{ ec2.instances }}"

  - name: Add EC2s to ec2_dyn_group group
    add_host:
      hostname: "{{ item.public_ip }}"
      groups: ec2_dyn_group
      ansible_ssh_private_key_file: "{{ ssh_private_key_path }}"
      ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
    with_items: "{{ ec2.instances }}"

  - name: Create new record in Route53
    route53:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      state: present
      zone: "{{ cert_common_domain_zone }}"
      record: "{{ cert_common_name }}"
      type: CNAME
      ttl: 7200
      value: "{{ lb.elb.dns_name }}"
      wait: yes

- name: Renew SSL keys
  import_playbook: "ec2_dyn_group.yml ec2_dyn_group"
  tags: [ 'never', 'update' ]

- name: Issue SSL keys
  import_playbook: "le.yml ec2_dyn_group"
  when: issuer == "true"
  tags: [ 'never', 'init' ]